<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>자바의 제네릭(Generic)</title>
    <link href="/2021/10/07/%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    <url>/2021/10/07/%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</url>
    
    <content type="html"><![CDATA[<p>오늘은 제네릭에 대해 학습했다. 학습하면서도 아리까리한 게 많아 복습할 겸 포스팅을 남긴다. 제네릭… 어렵다. 제네릭 개xx야. 개 xx.이xxx한 xxx놈아…!</p><p>진정하고 시작하자.</p><h1 id="제네릭의-정의"><a href="#제네릭의-정의" class="headerlink" title="제네릭의 정의"></a>제네릭의 정의</h1><p>사전에서 <strong>Generic</strong>을 찾아보면 <em>‘일반적인, 포괄적인’</em> 으로 표기되어 있다. 자바에서의 제네릭이 의미하는 바도 크게 다르지 않다.<br>제네릭은 자바의 수많은 자료형들, 그 중에서도 <strong>포괄적</strong>이고 <strong>일반적</strong>인 형식을 의미한다.</p><p>내가 좋아하는 한 아이돌 육성 게임(ㅎㅎ)을 예시로 들며 제네릭에 대해 설명해보겠다.<br>지금부터 타입별로 아이돌을 육성하는 프로그램을 개발한다고 생각해보자.</p><h2 id="아이돌-육성-프로젝트ㅎㅎ"><a href="#아이돌-육성-프로젝트ㅎㅎ" class="headerlink" title="아이돌 육성 프로젝트ㅎㅎ"></a>아이돌 육성 프로젝트ㅎㅎ</h2><ul><li><p>아이돌은 각 <strong>3가지 타입 중 하나</strong>를 고유하게 가지고 있다.  </p><ul><li>보컬</li><li>댄스</li><li>비주얼</li></ul><p>  이 특성들을 클래스로 만들 것이다.</p></li><li><p><code>스카우트</code> 클래스에서 아이돌의 타입을 가져(<code>get</code>)오거나, 설정(<code>set</code>)해줄 수 있다.<br>먼저 <code>보컬</code>이 특기인 아이돌을 스카우트하는 <code>Scout</code> 클래스를 생성한다고 해보자.</p><blockquote><p>Scout Class <strong>보컬</strong>편!</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Scout</span> </span>&#123;<br>  pritave Vocal type;<span class="hljs-comment">// type 변수를 Vocal형으로 선언</span><br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(Vocal type)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.type = type;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Vocal <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> type;  <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  좋다. 그런데 아직 두 타입이 남았다. 이 두 타입의 메서드는 크게 다를까?<br>Scout Class <strong>댄스</strong>편!</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Scout</span> </span>&#123;<br>  pritave Dance type;<span class="hljs-comment">// type 변수를 Dance형으로 선언</span><br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(Dance type)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.type = type;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Vocal <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> type;  <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Scout Class <strong>비주얼</strong>편!</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Scout</span> </span>&#123;<br>  pritave Visual type;<span class="hljs-comment">// type 변수를 Dance형으로 선언</span><br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(Visual type)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.type = type;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Vocal <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> type;  <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  코드를 보면 그냥 각 참조자료형(3 Type)만이 달라졌을 뿐, 결국 <code>get</code> 하고 <code>set</code> 하는 기능은 달라지지 않았다. 이런 식의 반복되는 코드는 지양하는 것이 좋다. </p></blockquote></li></ul><h3 id="잠깐-이전에-학습한-다형성을-활용해서-생각해보자"><a href="#잠깐-이전에-학습한-다형성을-활용해서-생각해보자" class="headerlink" title="잠깐! 이전에 학습한 다형성을 활용해서 생각해보자."></a>잠깐! 이전에 학습한 <strong>다형성</strong>을 활용해서 생각해보자.</h3><p><code>Scout</code> 클래스가 <code>type</code>의 자료형을 Vocal, Dance, Visual이 아니라<br>상위 클래스인 <code>Object</code>로 선언한다면?<br>이 세 가지의 class 뭉텅이를 하나로 합칠 수 있을 것이다. 살펴보자.</p><blockquote><p>Object를 활용한 Scout 클래스</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Scout</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> Object type;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(Object type)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.type = type;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> type<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>위와 같이 Scout 클래스에 Object형을 type으로 선언하면 아래와 같이 사용할 수 있다.</p><blockquote><p> test</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Scout scout = <span class="hljs-keyword">new</span> Scout();<br><br>Vocal t1 = <span class="hljs-keyword">new</span> Vocal();<br>scout.setType(t1);<span class="hljs-comment">// 여기서 Object 형으로 자동 형변환 된다.</span><br><br>Vocal t2 = (Vocal)scout.getType();<span class="hljs-comment">// 직접 형변환을 해줘야 한다.</span><br></code></pre></td></tr></table></figure><p>아까보다 코드가 간결해지긴 했다.<br>하지만 마지막 줄을 보자.<br>어떤 변수가 여러 참조형을 사용할 수 있도록 <code>Object</code> 클래스를 사용하면,<br>다시 <strong>원래 자료형으로 반환받을 때는 매번 형변환</strong>을 해야하는 번거로움이 있다.</p><p>이러한 ==<strong>캐스팅의 번거로움을 줄이기 위해</strong> 사용하는 프로그래밍 방식==이 바로 <strong>제네릭</strong>이다.<br>제네릭은 여러 참조형을 사용해야 하는 부분에 <code>Object</code> 대신 **&lt;하나의 문자&gt;**로 표현한다.</p><p>이제 제네릭을 사용해보자.</p><h2 id="제네릭-클래스-정의하기"><a href="#제네릭-클래스-정의하기" class="headerlink" title="제네릭 클래스 정의하기"></a>제네릭 클래스 정의하기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericScout</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">private</span> T type;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(T type)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.type = type;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> type<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>제네릭은 클래스 명 뒤에 다이아몬드 연산자 <code>&lt;&gt;</code> 를 사용하여 정의할 수 있으며, 예시에서 선언한  <code>&lt;T&gt;</code>는 <strong>Type</strong>의 약자이고 이를 <strong>자료형 매개변수</strong> 라고 부른다.<br>나중에 클래스를 사용할 때 다이아몬드 연산자 안에 <strong>&lt;실제 사용할 자료형&gt;</strong> 을 지정한다.</p><p>T말고도 선언부에서 자료형을 대충 구분할 수 있는 여러 문자들이 있다.</p><table><thead><tr><th>Type</th><th>Info</th></tr></thead><tbody><tr><td><code>&lt;T&gt;</code></td><td>Type</td></tr><tr><td><code>&lt;E&gt;</code></td><td>Element</td></tr><tr><td><code>&lt;K&gt;</code></td><td>Key</td></tr><tr><td><code>&lt;V&gt;</code></td><td>Value</td></tr><tr><td><code>&lt;N&gt;</code></td><td>Number</td></tr></tbody></table><p>이것들은 모두 암묵적 규칙일 뿐,<br>사실 &lt;&gt; 안에 멋대로 원하는 문자를 써도 오류는 나지 않는다.<br>하지만 협업 시 헷갈림을 방지하기 위해서라도 규칙은 지켜주는 게 좋다.</p><h2 id="제네릭-클래스-사용하기"><a href="#제네릭-클래스-사용하기" class="headerlink" title="제네릭 클래스 사용하기"></a>제네릭 클래스 사용하기</h2><p><code>Vocal</code> 타입을 스카우트하기 위해서는 다음과 같이 <strong>제네릭 클래스</strong>를 사용한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">GenericScout&lt;Vocal&gt; vocalScout = <span class="hljs-keyword">new</span> GenericScout&lt;Vocal&gt;();<br>vocalScout.setType(<span class="hljs-keyword">new</span> Vocal());<br>Vocal vocal = vocalScout.getType();<span class="hljs-comment">// 명시적 형변환을 해줄 필요가 없다</span><br></code></pre></td></tr></table></figure><p>아까 <code>Object</code> 클래스를 사용할 때와 다르게 타입을 <code>get</code> 해올 때 <strong>자료형 캐스팅을 해주지 않아도 된다.</strong></p><p><code>Scout&lt;Vocal&gt;</code> 에서 어떤 자료형을 사용할지 미리 명시했음으로 <code>getType()</code> 메서드에서 타입을 반환할 때 <strong>형변환이 일어나지 않아도 정상적으로 <code>Vocal</code> 타입이 반환이 된다.</strong></p><p><code>Scout&lt;Vocal&gt;</code> 에서 <code>&lt;T&gt;</code>에 위치한 <code>Vocal</code>형을 <strong>대입된 자료형</strong> 이라고 하고,<br><code>Vocal</code>형을 대입해 만든 <code>GenericScout&lt;Vocal&gt;</code>을 <strong>제네릭 자료형</strong> 이라고 한다.</p><table><thead><tr><th>용어</th><th>설명</th></tr></thead><tbody><tr><td><code>GenericScout&lt;Vocal&gt;</code></td><td>제네릭 자료형, 매개변수화된 자료형</td></tr><tr><td><code>&lt;Vocal&gt;</code></td><td>대입된 자료형</td></tr></tbody></table><h2 id="대입에-사용할-자료형을-제한하는-방법"><a href="#대입에-사용할-자료형을-제한하는-방법" class="headerlink" title="대입에 사용할 자료형을 제한하는 방법"></a>대입에 사용할 자료형을 제한하는 방법</h2><p>제네릭 클래스에서 T자료형에 사용할 자료형에 제한을 둘 수 있다.<br>제약을 두지 않으면 <code>Vocal</code>, <code>Dance</code>, <code>Visual</code> 타입이 아니라, <strong>뜬금 없는 <code>Tuna</code>(참치) 타입, <code>Ninja</code>(닌자) 타입 아이돌이 스카웃 될 수 있다.</strong><br>물론, 살다보면 또 <a href="https://namu.wiki/w/%EC%95%84%EC%82%AC%EB%A6%AC%20%EB%82%98%EB%82%98%EB%AF%B8">이런…</a> <a href="https://namu.wiki/w/%ED%95%98%EB%A7%88%EA%B5%AC%EC%B9%98%20%EC%95%84%EC%95%BC%EB%A9%94">저런…</a> 일들이 일어날 수도 있다. 하지만 우리는 그것을 방지하고 싶다. 그렇다면 ==사용할 클래스에 자료형 제한을 두기 위해 <code>extends</code> 예약어==를 사용할 수 있다.</p><ol><li>우선 GenericScout<T> 클래스에서 T에 ‘대입된 자료형’으로 사용할 재료 클래스 <code>Type</code>를 추상클래스로 만든다. 그리고 추상 메서드도 하나 만들어주자. <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Type</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doScouting</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure> 여기서 선언한 추상 메서드를 반드시 구현해야 한다.</li><li>그리고 각각 <code>Vocal</code> <code>Dance</code> <code>Visual</code> 을 <code>Type</code> 클래스에서 상속받게끔 한다. 추상 메서드도 여기서 구현한다.<blockquote><p>Vocal 클래스 </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vocal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Type</span> </span>&#123;<br>  <span class="hljs-comment">// 추상메서드 구현</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doScouting</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Vocal 아이돌을 스카웃 합니다.&quot;</span>)<br>  &#125;<br>  <br>  <span class="hljs-comment">// 기존 메서드 오버라이드</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;타입은 Vocal 입니다.&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Dance 클래스 </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dance</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Type</span> </span>&#123;<br>  <span class="hljs-comment">// 추상메서드 구현</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doScouting</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Dance 아이돌을 스카웃 합니다.&quot;</span>)<br>  &#125;<br>  <br>  <span class="hljs-comment">// 기존 메서드 오버라이드</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;타입은 Dance 입니다.&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Visual 클래스 </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Visual</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Type</span> </span>&#123;<br>  <span class="hljs-comment">// 추상메서드 구현</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doScouting</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Visual 아이돌을 스카웃 합니다.&quot;</span>)<br>  &#125;<br>  <br>  <span class="hljs-comment">// 기존 메서드 오버라이드</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;타입은 Visual 입니다.&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote></li><li>테스트 해봅시다. <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericScout&lt;T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Type&gt;</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">T</span> <span class="hljs-class"><span class="hljs-keyword">type</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure> 이렇게 클래스이름에 <code>GenericScout&lt;T extends Type&gt;</code> 라고 명시하여 제한을 두면, ==Type class를 상속받지 않는 <code>Ninja</code> 클래스나 <code>Tuna</code> 클래스를 넣을 시 오류가 발생한다.==<br> 또 저렇게 extends로 확장해온 class는 ==확장해온 Type클래스에서 선언한 메서드도 그대로 사용할 수 있다.== 그러니 아까 <code>Vocal</code>, <code>Dance</code>, <code>Visual</code>에서 각각 정의한 <code>doScouting()</code> 메서드를 그대로 사용할 수 있다는 거다.</li></ol><h2 id="제네릭의-장점-정리-땅땅"><a href="#제네릭의-장점-정리-땅땅" class="headerlink" title="제네릭의 장점 정리 땅땅"></a>제네릭의 장점 정리 땅땅</h2><ol><li><code>extends</code> 예약어를 통해 <strong>잘못된 타입이 들어오는 것을 컴파일 단계에서 방지</strong>할 수 있음.</li><li>클래스 외부에서 타입을 지정하기 때문에 <strong>명시적 타입 변환에 신경쓰지 않아도 됨.</strong></li><li>당연한 얘기지만, <strong>코드의 재사용성이 높아짐.</strong></li></ol><hr><p>여태까진 제네릭 클래스에 대해서 다뤄보았다. 다음엔 제네릭 메서드의 활용에 대해서 다뤄보겠다. 오늘 둘 다 하기에는 내.기력.이.소.진됨..<br>아이돌 픽업하러 가야지</p>]]></content>
    
    
    <categories>
      
      <category>Java Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>공부</tag>
      
      <tag>자바</tag>
      
      <tag>제네릭</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>국비회고 프롤로그쯤 되는 포스트</title>
    <link href="/2021/10/06/%EA%B5%AD%EB%B9%84%ED%9A%8C%EA%B3%A0-%ED%94%84%EB%A1%A4%EB%A1%9C%EA%B7%B8%EC%AF%A4-%EB%90%98%EB%8A%94-%ED%8F%AC%EC%8A%A4%ED%8A%B8/"/>
    <url>/2021/10/06/%EA%B5%AD%EB%B9%84%ED%9A%8C%EA%B3%A0-%ED%94%84%EB%A1%A4%EB%A1%9C%EA%B7%B8%EC%AF%A4-%EB%90%98%EB%8A%94-%ED%8F%AC%EC%8A%A4%ED%8A%B8/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>나는 현재 <strong>24살</strong>, 최종학력 <strong>고졸</strong>으로 현재 <strong>Java Spring 웹 개발자 과정 국비교육</strong>을 다니고 있다.<br>이제 딱 일주일정도 된 거 같다. 돈 받으며 배울 수 있는 6개월의 시간. 그냥 허비하고 싶지 않아서 매주 회고라도 써보려고 한다. 매일 쓸까 했지만 사실 그것은 에바이고. 어쩌면 이 회고도 격주가 될 수도 있고 월말 회고가 될 수도 있지만!</p><p>살면서 일기는 주구장창 써왔지만 회고… 라고 뭔가 각을 잡아 글을 써본 적은 없다. 그래서 상당히 낯설다. 무슨 말을 써야 할까? 난 이뤄온 것도 없고 가진 것도 없고…<br>그럼에도 일단 써보려고 한다. </p><p>아무튼 주의할 점. 이것은 회고가 아닐 수도 있다. 그냥 내가 회고라고 부르는(우기는) 것일 뿐. 남이 보기엔 그냥 시시한 이야기일 수도 있다. 하지만 나는 시시한 이야기에서 종종 힘을 얻고는 한다. 그냥 <em>오늘은 된장국을 끓여 먹었어요… 팽이버섯을 넣었어요… 보글보글 소리가 났어요…</em> 하는 별 거 아닌 이야기에도 가끔은 뭔가 앞으로 나아갈 힘이 나기도 하는 것이다. 이건 내가 이상한 거겠지만. </p><p>그러니 미래의 나를 위해서라도 써보려고 한다! 그리고 혹시나 이런 나를 닮은 조금 이상하고 다정한 누군가를 위해서라도. 뭐라도 써보기로 마음을 단단히 먹고… 나뭇잎 밑에 도토리를 숨기는 다람쥐의 마음이 되어 글을 쓴다.</p><h2 id="학원-회고를-시작하기-전에"><a href="#학원-회고를-시작하기-전에" class="headerlink" title="학원 회고를 시작하기 전에"></a>학원 회고를 시작하기 전에</h2><p>먼저 개발자를 진로로 삼게 된 된 계기부터 설명을 하자면 상당히 긴 이야기가 될 것 같다. 하지만 언젠간 꼭 자세히 이야기해보고 싶었기 때문에 이렇게 된 참에 <strong>나의 (장황한) 프로그래밍 입문기</strong> 를 한 번 써봐야겠다. 프롤로그가 좀 길다. 아마 이건 내가 쓰고 나만 읽는 글이 되겠지만 그러니 더더욱 써야겠다.</p><h3 id="1-우울의-시작과-끝"><a href="#1-우울의-시작과-끝" class="headerlink" title="1. 우울의 시작과 끝"></a>1. 우울의 시작과 끝</h3><p>작년 쯤 나는 지독한 우울증과 무기력증에 빠져 있었는데, 프리랜서로 일을 하며 일상생활에 큰 불편함이 없는 수준의 돈을 벌고 있었음에도 불구하고 딱히 경력이 쌓이는 일도 아니었고 일에 보람도 느끼지 못하여 인생에 권태기를 느끼고 있었다. 그러던 중 할머니가 돌아가셨다는 연락을 받았다. 할머니 손에 자라온 난 당연하게도 패닉에 빠졌다. 아무런 일도 할 수가 없었다. </p><p>할머니는 돌아가시기 전까지 암을 앓으며 요양병원에서 1년정도 계셨다. 그렇기에 언젠간 이런 날이 올 줄은 알았지만… 알았지만… 알고 있음에도 사람이란 막상 정말 큰 일이 닥쳐오면 뭔가에 압도되어버리기도 하는 것이다. 나는 아주 어렸을 때부터 할머니 손에 자라왔기 때문에 인생의 대부분을 할머니와 함께 보냈다. 그런 할머니가. 어제는 있다가 이제는 없다는 것이 나는 조금 받아들이기 힘들었던 것 같다. 할머니가 딱히 나의 삶의 이유는 아니었지만 당장 할머니가 들어내진 후의 나의 남은 삶의 부피가 너무도 얇은 것이다. 살아낼 이유 같은 것보다야 훨씬 얇아져버린 것이다.</p><p>프리랜서로 하던 일도 그만두었다. 난 정말이지 아무런 것도 하고 싶지 않았다.<br>굳이 뭔가를 하자면 생각하는 것을 그만 두고 싶었다. 우울하고 슬프고 더럽고 그런 생각들만 자꾸 들었다. 괴롭다기보단 지긋지긋했다. 죽고 싶은 건 또 아니었다 그냥 잠깐 몸의 전원을 꺼버리고 싶었다.<br>아무튼 생각하는 것을 그만두기 위해서 나는 꽤 노력했다. 약을 엄청 먹고 잠을 엄청 잤다. 그러면. 잠을 자고 있을 때면 그제서야 끔찍한 생각을 멈출 수 있었다.</p><p>그렇게 살다가 정말, 아무런 계기도 없이 머리에 스위치가 번쩍. 하고 들어버렸다. 누군가 전원을 꺼줬으면 했는데 도리어 켜버린 듯이. 뭔가 우습지만… 나는 처음엔 갑자기 요리를 했다. 물론 처음엔 스스로 먹지도 못했다. 그냥 요리한 것을 가족이나 주변 사람들에게 나눠주었다. 그리고 청소를 하고… 머리를 쓰고 싶어서 무작정 수학 문제를 풀었다. 무슨 정신으로 그랬는지 정말 모르겠다. 다시 생각해도 참… 미친 사람 처럼 매일 걷고… 수학 문제를 풀다가 요리를 하다가 자전거를 타고… 그렇게 한 달을 보낸 거 같다.</p><h3 id="2-갑자기-웹"><a href="#2-갑자기-웹" class="headerlink" title="2. 갑자기 웹"></a>2. 갑자기 웹</h3><p>그리고 우연히 인터넷에서 코xx 이라는 사이트의 광고를 보고 나는 예전에 잠깐 다닌 디자인 학원에서 HTML CSS를 맛보기로 잠깐 배웠던 것을 떠올렸다. 그땐 그마저도 일을 시작하고, 할머니가 암에 걸리고 흐지부지 그만두게 되었지만… 아무튼 그걸 배울 때 잠깐 재미 있었던 기억이 스쳤다. 그렇게 그냥… 광고를 보자마자 무지성 결제를 하고 일단 <strong>화면에 영문을 치는 행위</strong>를 시작하게 되었다.</p><p><img src="https://z-images.s3.amazonaws.com/thumb/5/59/HTML%EC%9D%80_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4%EA%B0%80_%EC%95%84%EB%8B%99%EB%8B%88%EB%8B%A4.jpg/400px-HTML%EC%9D%80_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4%EA%B0%80_%EC%95%84%EB%8B%99%EB%8B%88%EB%8B%A4.jpg" alt="HTML은 프로그래밍 언어가 아닙니다 - 제타위키"><br>(HTML더러 ‘프로그래밍’이라고 하면 큰일남 사람 민망주기 좋아하는 놈들이 달려와서 저런사진 보내면서개롭힘)</p><p>사실 지금 와서 생각해보면 무료로 배울 수 있는 방법은 얼마든지 있지만… 나의 결정을 후회하지는 않는다. 일단 내가 그 강의를 결제한 순간부터 뭐라도 시작되어버렸으니 말이다.</p><h3 id="3-그리고-메차쿠차-자습했다"><a href="#3-그리고-메차쿠차-자습했다" class="headerlink" title="3. 그리고 메차쿠차 자습했다."></a>3. 그리고 메차쿠차 자습했다.</h3><p>생각보다 꾸준하게 나는 HTML CSS 공부를 이어갔다. 남들은 일주일이면 배운다는 걸 난 한 달 정도 진득하게 붙잡았다. 이건 그냥 내가 선천적으로 이해 속도가 느린 탓도 있지만… 학생 때처럼 시험같이 쫓기는 것 없이 내가 배우고자 하는 걸 여유롭게 배운 게 얼마만이던가… 여기서 작은 뿌듯함을 느꼈다. 몇줄 쓰는 것만으로 웹에서 무언가 변화가 일어나는 게 신기했다. </p><h3 id="4-JavaScript-동적인-웹"><a href="#4-JavaScript-동적인-웹" class="headerlink" title="4. JavaScript? 동적인 웹?"></a>4. JavaScript? 동적인 웹?</h3><p>자바스크립트를 배우기 전임에도 나는 충분히 나의 웹생활(?)이 다이나믹하고 즐거웠는데 나중에 <em><strong>자바스크립트</strong> 를 배우면 이렇게 동적인 페이지도 만들 수 있어요 !</em> 라는 말을 듣고는 그냥 그대로 기절할 뻔했다. 설렌다기보단 덜컥 겁이 났다. 내가 이렇게 굉장해 보이는 걸 할 수가 없잖아… 무슨 수로…? 뭐가 막 슝 날아다니는데요?</p><p>하지만 나는 그냥 했다. 그냥… 정말 그냥 해봤다. (아 회고 이렇게 쓰는 거 아닌 거 같은데) 스위치가 켜져서 갑자기 안 하던 요리를 시작한 그때처럼 그냥 했다.</p><p> 그리고 그냥… 됐다. 아 사실! 그냥은 되지 않았다… 꽤 머리가 아팠다. 대체 함수가 뭐고 리턴은 뭐고… 그래도 그냥 했다. </p><p>제일 처음 자바스크립트를 접할 때 배웠던 건 생활코딩 JavaScript로 버튼을 클릭하면 나이트모드, 데이모드 배경색상과 콘텐츠 색상이 교차되는 것이었다. DOM객체에 대해 알게 되고 그것을 다루게 되며 나의 세상은 좀 더 넓어졌다. 더 많은 것을 알고, 그걸 바탕으로 컨트롤 할 수 있다는 건 얼마나 벅차는 일인가…</p><p>포문이 돌아가니 마니 머? 이런 생각을 하는 건 죽음에 대해 생각하는 것보다 견딜만 했다. 견딜만 하다못해 솔직히 좀 기뻤다. 내 머릿속에선 끔찍한 생각만 자라는 줄 알았는데 이 생각들로 뭔가가 만들어지기도 하는구나. 하고. 이쯤 되니 나는 언젠간 이 일을 직업삼아야지! 하는 다짐을 하게 된 것 같다. 하지만 아주 작은 다짐이어서 나는… 치열하게 공부하지 않았다. ㅋㅋㅋ</p><p>아무튼 그렇게 자바스크립트로 아무 쓰잘데기 없지만 귀여운 (포춘쿠키 사이트, 밥 뭐 먹을지 메뉴 추천해주는 사이트, 로또 번호 추첨기 앗 이건 안 귀여워…) 프로젝트를 진행하고 몇 개의 프로젝트를 클론코딩하며 나름 즐겁게 독학을 이어나갔다. </p><h3 id="5-이후의-행보…"><a href="#5-이후의-행보…" class="headerlink" title="5. 이후의 행보…"></a>5. 이후의 행보…</h3><p>나중에는 오프라인 스터디도 나가보고, 온라인 스터디에도 참여하며 점점 다른 사람과 커뮤니케이션도 시작했다. 확실히 혼자 공부할 때보다 훨씬 재미 있었다. 서로 알고 있는 지식의 폭도 다 달랐기 때문에 서로 주고받는 게 많았다.<br>코딩이 아예 처음인 친구에게 알려주기도 했다.<br>‘이 코딩이라는 넘은… 나의 무기력을 구원해준 멋찐넘이야’ 라고 열심히 주변에 영업을 했지… 약간 다단계 같았을 거 같다. 코단계…?</p><p>아무튼 점점 갈수록 즐거워서 직업 삼아야지! 하는 다짐보다는 우헤헤 재밌어! 재미짱! 하며 공부를 했다. 그러던 중 갑자기 <del>아이돌마스터라는 것을 만나고…</del>  ^^ …이 이야기는 하지 않겠다.<br> 아무튼 행복하게 잘 지냈다.<br> 덕질도 하고 공부도 하고(물론 빈도가 많이 줄었다 덕질에 비해선…) 지내다가 </p><blockquote><p>엇! 즐겁긴 하지만… 나 이제 정말 더는 미룰 수 없어 나의 취업… <del>그리고 나의 과금…</del> </p></blockquote><p>이라는 생각이 들었다. 프리랜서 일은 관두고 알바를 하며 공부를 이어왔지만. 알바만으론… <del>과금을 맘껏 할 수 없어…</del></p><p>그렇게 빚어진 것이 지금의 나…<br>와. 완전… 별볼 일 없구만. 너무 시시하구만…<br>근데 뭐 이리 장황하지? 공부를 너무 느릿느릿 허송세월 보내며 해서 그런 것 같다.</p><h2 id="국비학원으로-취업준비"><a href="#국비학원으로-취업준비" class="headerlink" title="국비학원으로 취업준비?"></a>국비학원으로 취업준비?</h2><p>부끄럽지만 회사 취업 준비를 태어나서 한 번도 해본 적 없어서, 또 학력도 고졸인지라… 무작정 혼자 준비하기보다는 어디선가 도움을 받으면 좋지 않을까 싶어 이것저것 알아봤다. 역시나 거의 유료 부트캠프가 많았고, 나는 더이상의 금전적 여유가 없었다. 가족에게 손을 벌릴 상황도 아니었고. 아무튼 선택지가 국비 밖에 없었다. 다행히 그지였던지라 1유형에 선발이 되었고, 월 80을 받으며 공부를 할 수 있는 환경이 </p><p>수도권이 아닌 지라 그런가 학원 자체가 내가 원하는 과정이 없었다. 나는 React나 vue 같은 자바스크립트 프레임워크를 진득하게 배워보고 싶었는데 그런 과정이 당장은 없었다. </p><p>그러던 중 백엔드 과정이 눈에 들어왔고 그걸로 한참을 고민했다. 백엔드를 언젠가는 배워보고 싶었지만 (나는 정말이지 웹을 너무 사랑하기 때문에!)</p><p>하… 일단 커리큘럼들이 너무 무서웠다. 6달 안에 자바만 배운다 해도 무서운데,<br><strong>6달동안 자바, jsp, Spring에다가 + 프론트엔드 찍먹</strong>까지 한다고?… 거기다 <strong>팀플</strong>까지…?<br>아니 이런 걸 내가?<br>나… 나의 힘과 능력으로 할 수 없어요… </p><p>무서워서 구글링을 좀 해보니 악명 또한 높았다. 강사들이 대충 책만 읽게 하고 자습을 시킨다. 뭘 해야 할지 모르겠다. 내가 뭘 하고 있는지조차 모르겠다… 등등…</p><p>악명이 높았지만, 주변에서 말리기도 했지만, 일단! 그냥 신청했다. 어영부영 아무 것도 안 하는 것보다야 낫겠지 싶어서. 대신 여태까지 했던 것보다 조금 더 열심히 해보기로.</p><h2 id="국비-학원-상담"><a href="#국비-학원-상담" class="headerlink" title="국비 학원 상담"></a>국비 학원 상담</h2><p>그렇게 알아보고 설레는 마음으로 첫 학원 상담을 갔을 때 난 약간 멘탈이 갈려버렸다. 애초에 고졸을 안 받는 학원이었던 것 같다. 나를 보자마자 표정이 언짢아지는 게 느껴졌다. 그리고 쏟아지는 독설…</p><blockquote><p>지금까지 뭐 했냐,<br>이쪽 엄청 어렵다 각오는 했냐,<br>각오를 했는데 최종 학력이 고졸이면 곤란하다,<br>소이씨는 지금 내가 보기엔 취업할 준비가 안 되어 있다.<br>이쪽 일에 대해서 잘 모르고 무작정 온 거 같다, 그럼 안 된다.<br>이쪽 일이 소이씨랑 잘 안 맞는 거 같다…</p></blockquote><p>이런 식으로 좀 말을… 세모모양으로 하셨다. 하트모양으로 말해야지! 참내!<br>그렇지만 이렇게 돌아가기 너무 억울해서<br><strong>“떨어지더라도, 일단 신청이라도 일단 해볼 수 있나요?”</strong> 하니까 표정이 확 식는 게 정말… ‘아 귀찮은 사람 만났다.’ 라는 표정.<br>한숨 푸욱 쉬시더니</p><blockquote><p>‘하… 그럼 뭐 시험이라도 보실래요?’ <em>(말투 매우매우 싸가지바가지였음!)</em></p></blockquote><p>하더니 시험지 두장 팔랑 내다줌. 대충 웹과 백엔드 용어… 기초 지식들이 문제로 나왔었었다. 프론트엔드를 주로 공부했지만 거의 들어본 말들이었고, 다행히 합격점이 나왔으나 <strong>그래도 고졸은 안된다</strong>며 또 돌려보냄 ^^… </p><p>제가 취업할 준비가 안 되어 있대요. 취업할 준비가 되어 있으면 취업을 했겠죠 학원에 왔겠나요… 아무튼 생각하니 빡치네… 아무튼 이게 넘 억울해서 지하철 화장실에서 엉엉 울다가 집에 온 슬픈 전설이 있어요…_</p><hr><p>아무튼 첫 번째 학원에서 데이고 나서 정말 눈에 불을 켜고 학원 상담을 다녔다. 4군데정도 다니면서 각 학원의 장단점을 비교했다. 여름에 정말 힘들어 디지는 줄 알았으나 위와 같은 학원은 정말 가고 싶지 않았기 때문에… 열심히 상담을 다녔다.</p><h3 id="그렇게-지금-학원을-정하게-된-계기는"><a href="#그렇게-지금-학원을-정하게-된-계기는" class="headerlink" title="그렇게 지금 학원을 정하게 된 계기는"></a>그렇게 지금 학원을 정하게 된 계기는</h3><ol><li><strong>선생님이 과목별로 여러명</strong>(<em>프론트엔드/java기초문법/프레임워크/DB</em>)에 전부 <strong>현업 경험</strong>이 있어서 배울 점이 많을 거라고 생각 했음.</li><li><strong>자소서, 이력서 봐주실 취업 담당 상담사</strong>님이 따로 계심</li><li><strong>고졸을 취업시킨 경험</strong>이 있음</li><li>학원과 연계된 회사가 있음 (여기로 갈진 모르겠지만 그래도 혹시 모르니까)</li></ol><p>위의 네 가지 때문인데, 사실 국비 학원 커리큘럼이 거기서 거기. 다 비슷해서 나는 사실 공부보다는 <strong>취업</strong> 과 <strong>포트폴리오</strong> 에 도움을 받고 싶었기 때문에… 2번과 3번을 제일 중요하게 생각했다. </p><hr><p>아무튼 학원을 정하고 나니 한 달 뒤에 개강이었다. 갑자기 한달의 시간이 생겨버린 김에… 자바 기본서 <strong>&lt;Do it! 자바 프로그래밍 입문&gt;</strong> 을 보며 기초 문법 예습을 했다. 사실 지금도 다 읽진 못했고 지금도 11장을 겨우 다 읽은 참이다. (배우는 속도 레전드)</p><p>하지만 객체지향이라는 것에 대해 조금 감을 잡고 나니 여태까지 내가 알던 프로그래밍의 세계가 확장되는 느낌. 요즘은 진짜로 공부하는 게 너무 재밌다. 정말 자바를 배우길 잘했다는 생각이 든다. </p><h2 id="수업은"><a href="#수업은" class="headerlink" title="수업은?"></a>수업은?</h2><p>학원에서 진행되는 과목은 총</p><ol><li>Java 기초문법</li><li>JSP/Spring (위와 동시에 나간다는 점이 신기함.)</li><li>웹표준(HTML5/CSS)</li><li>DB (Oracle / Linux 환경)</li><li>(교양) 대인관계수업</li></ol><p><strong>이렇게 다섯가지이고, 선생님도 다섯분이다.</strong></p><p>다섯가지 과목을 하루에 두 과목씩<br>오전 과목, 오후 과목으로 나뉘어 진행이 된다.</p><p>오전 8시~ 12시 50분까지 <strong>오전수업동안 한 과목</strong>을 진행하고<br>1시간의 점심시간을 가진 후<br>1시 50분 ~ 5시 40분까지 <strong>오후수업동안 나머지 한 과목</strong>을 진행한다.</p><p>이후는 퇴실 비콘을 찍고…<br><strong>자습을 원한다면 9시까지</strong> 1강의장에 남아서 자습을 할 수 있다.<br>한 번 남아서 자습을 했는데 나 뿐이어서 좀 민망했음…</p><h2 id="첫수업-그로부터-일주일"><a href="#첫수업-그로부터-일주일" class="headerlink" title="첫수업, 그로부터 일주일"></a>첫수업, 그로부터 일주일</h2><p>생각만큼 나쁘지 않았다. 선생님들은 친절하시고… 수업도 난이도도 완전 개발이 처음인 사람을 기준으로 진행되고 있어서 따라가기 <strong>아직은</strong> 전혀 버겁지 않다. <strong>아직은!</strong></p><p>폐가 될까 걱정했지만…<br>어제는 무려 옆자리 사람이 웹서버 여는데 오류가 뜨는 걸 도와서 고쳐줬다…!<br>그밖에도 환경설정 때 필기해둔 걸 공유하거나… 해서 종종 같은 반 분들에게 따봉 이미지를 받는다 😁<br>관종은 기뻐요…</p><p>하도 인터넷에서 못 따라가겠어요… 힘들어요… 하는 글만 봐서 정말… 겁을 너무 먹고 갔는데, 생각만큼 열악하지는 않았다.<br><strong>내 의지만 있다면 못할 건 없을 것 같다.</strong> 엉덩이 붙이고 앉는 시간이 생기니 오히려 뭐든지 더 하고 싶다. <em>(그래서 자습시간엔 깃허브 프로필도 꾸미고 이 블로그도 만들었지!✨🎈)</em></p><p>아무튼 아침 일찍 일어나(5시 반쯤…) 요가를 하고 집에 와서는 일기를 쓸 여유 정도는 된다는 말씀.</p><p>이제 남은 6개월을 어떻게 버텨내는지가 중요하겠지만.<br>잘 해야지.</p><p>글이 두서가 없다.<br>졸리니까 여기까지 써야겠다.</p><p>버텨내는 삶. 화이팅.</p>]]></content>
    
    
    <categories>
      
      <category>우당탕! 자바 국비교육</category>
      
    </categories>
    
    
    <tags>
      
      <tag>국비</tag>
      
      <tag>회고</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>생각에 설탕치기</title>
    <link href="/2021/10/04/%EA%B0%90%EC%A0%95%EC%9D%84-%EA%BE%B9%EA%BE%B9-%EB%88%8C%EB%9F%AC-%EB%8B%B4%EC%95%84-%EC%84%A4%ED%83%95%EC%97%90-%EC%A0%88%EC%9D%B4%EB%A9%B4/"/>
    <url>/2021/10/04/%EA%B0%90%EC%A0%95%EC%9D%84-%EA%BE%B9%EA%BE%B9-%EB%88%8C%EB%9F%AC-%EB%8B%B4%EC%95%84-%EC%84%A4%ED%83%95%EC%97%90-%EC%A0%88%EC%9D%B4%EB%A9%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="설탕-팍팍-친-블로그"><a href="#설탕-팍팍-친-블로그" class="headerlink" title="설탕 팍팍 친 블로그"></a>설탕 팍팍 친 블로그</h1><p>이 블로그는 정적 블로그 생성 툴 <a href="https://hexo.io/ko/index.html">Hexo</a> 로 만든 나의 귀여운 블로그.</p><p>정적 블로그 생성 툴 <strong>Hexo</strong>의 존재를 알려준 <a href="https://hatchling13.github.io/">해츨링</a>님 감사합니다 ✨😊<br>링크거는 거 신기해서 괜히 막 막 걸어보기ㅋㅋ</p><hr><p>전부터 일기를 쓸 때면 종종 일기장들을 차곡차곡 모아서<br>잼병에 담가 푹 절이는 생각을 했다!<br>왜냐면 재밌으니까 헤헤</p><p>그니까… 여긴… 이제부터<br>나애 소중한 ✨<strong>싸이버 쨈보틀</strong>✨…이 된 것이돠…</p><p>나중에 병모양의 디자인으로 수정해보는 것도 재밌겠다.<br>헐~ 짱 재밌겠는데? 막 오래된 글 숙성시키구?<br>물론 시간이 날 때의 얘기지만</p><hr><p>무튼 이제 블로그도 생겼으니<br>회고라는 것도 써보고 싶고,<br>일기도 써보고 싶고…<br>배운 것들도 기록하고 싶고…</p><p>하고 싶은 게 많다!</p><p>근데 당장 낼모레가 자격증 시험인데 휴…<br>기출 몇번 돌리긴 했지만. 걱정이 되는군…</p><p>난 바쁠 때 왜 이렇게 딴짓에 진심이 되는 것임</p><p>아무튼<br>아무튼간에!<br>나의 블로그 안녕!!</p><h3 id="헬로월드-냥냐"><a href="#헬로월드-냥냐" class="headerlink" title="헬로월드 ~ 냥냐 ~"></a><em>헬로월드 ~ 냥냐 ~</em></h3><p>사실 월드라기엔<br>에게… ~~<br>약간… 읍/면/리 이쪽,,, 같지만…</p><p>아무튼 이곳에<br>이것저것 써내리구<br>설탕 도 막 팍팍 치고<br>마 아무튼 최선을 다해볼 것이다<br>😠😣 </p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>딸기쨈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
